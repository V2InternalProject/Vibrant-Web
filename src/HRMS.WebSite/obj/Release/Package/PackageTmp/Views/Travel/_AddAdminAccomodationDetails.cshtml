@using HRMS.Models
@model HRMS.Models.AccomodationAdmin
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("../../Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
<script src="../../Scripts/jquery.form.js" type="text/javascript"></script>
<script src="../../Scripts/Travel/_AdminAccomodationDetails.js" type="text/javascript"></script>
<script src="../../Scripts/Global.min.js" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {
        if ('@ViewBag.UserRole' != '@UserRoles.TravelAdmin') {
            $(".AdminFields").attr("disabled", "disabled");
            $("#BookingFromDateCollection .ui-datepicker-trigger").hide();
            $("#BookingToDateCollection .ui-datepicker-trigger").hide();
        }
        //        $('#BookingFromDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, yearRange: "-60:+10", showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true })
        //            .bind("change", function () {
        //                var minValue = $(this).val();
        //                minValue = $.datepicker.parseDate("mm/dd/yy", minValue);
        //                minValue.setDate(minValue.getDate() + 1);
        //                $("#BookingToDate").datepicker("option", "minDate", minValue);
        //            })
        //        $('#BookingToDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, yearRange: "-60:+10", showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
        var startDate = new Date($('#TravelStartDate').val());
        var endDate = new Date($('#TravelEndDate').val());
        var ValidationExtensionStartDate = $('#TravelEndDate').datepicker('getDate');
        ValidationExtensionStartDate.setDate(ValidationExtensionStartDate.getDate() + 1);
        var ExtensionStartDate = ValidationExtensionStartDate;
        var ExtensionEndDate = new Date($('#TravelExtensionEndDate').val());
        if (ExtensionEndDate == 'Invalid Date') {
            if (startDate != 'Invalid Date' && endDate != 'Invalid Date') {
                var startDate1 = new Date($('#TravelStartDate').val());
                var endDate1 = new Date($('#TravelEndDate').val());
                $('#BookingFromDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, minDate: startDate1, maxDate: endDate1, showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
                $('#BookingToDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, minDate: startDate1, maxDate: endDate1, showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
            }
            else {
                $('#BookingFromDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, yearRange: "-60:+10", showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
                $('#BookingToDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, yearRange: "-60:+10", showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
            }
        }
        else {
            $('#BookingFromDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, minDate: ExtensionStartDate, maxDate: ExtensionEndDate, showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
            $('#BookingToDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, minDate: ExtensionStartDate, maxDate: ExtensionEndDate, showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
        }

        $("#btnSaveAccomodation").click(function () {
            //            if ($('#BookingFromDate').val() != null || $('#BookingToDate').val() != null) {
            //                if ($('#BookingFromDate').val() > $('#BookingToDate').val()) {
            //                    $("#AddAccomodationStartDate").dialog({
            //                        title: 'Accomodation Error',
            //                        resizable: false,
            //                        height: 'auto',
            //                        width: 'auto',
            //                        modal: true,
            //                        buttons: {
            //                            Ok: function () {
            //                                $(this).dialog("close");
            //                                $('#BookingFromDate').val('');
            //                                $('#BookingToDate').val('');
            //                            }
            //                        }
            //                    });
            //                }
            //            }
            if ($("#Accoupload").val() != "")
                AddAdminAccomodationDetails();
            else {
                $("#AdminAccomUploadError").text(" Please select File to upload").show();
                return false;
            }
        });

        $("#Accoupload").bind('change', function () {
            if ($("#Accoupload").val() != ""){
                $("#AdminAccomUploadError").hide();
                $("#FalseAccFileUploadBtn").val($(this).val());
                }
        });
    });
</script>
@using (Html.BeginForm("SaveAdminAccomodationUploadDetails", "Travel", FormMethod.Post, new { id = "frmAddAdminAccomodation" }))
{
    @Html.ValidationSummary(true)
    <div class="mrgnT25">
        @Html.HiddenFor(x => x.TravelId)
        @Html.HiddenFor(x => x.AccomodationID)
        @* <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Hotel Name")<span class="mandatory">*</span>
            </div>
            <div class="editor-field fieldwidth floatL ">
                @Html.TextBoxFor(x => x.HotelName, new { @class = "AdminFields" })
                <p class="qualif-detail">@Html.ValidationMessageFor(x => x.HotelName)</p>
                @Html.HiddenFor(x => x.HotelName, new { @id = "hotelName" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Hotel Address")<span class="mandatory">*</span>
            </div>
            <div class="editor-field fieldwidth floatL ">
                @Html.TextBoxFor(x => x.HotelAddress, new { @class = "AdminFields" })
                <p class="qualif-detail">@Html.ValidationMessageFor(x => x.HotelAddress)</p>
                @Html.HiddenFor(x => x.HotelAddress, new { @id = "hotelAddress" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Hotel Contact Number")<span class="mandatory">*</span>
            </div>
            <div class="editor-field fieldwidth floatL ">
                @Html.TextBoxFor(x => x.HotelContactNumber, new { @class = "AdminFields" })
                <p class="qualif-detail">@Html.ValidationMessageFor(x => x.HotelContactNumber)</p>
                @Html.HiddenFor(x => x.HotelContactNumber, new { @id = "hotelContactNumber" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Booking From Date")<span class="mandatory">*</span>
            </div>
            <div class="editor-field fieldwidth floatL " id="BookingFromDateCollection">
                @Html.TextBoxFor(x => x.BookingFromDate, String.Format("{0:dd-MMM-yyyy}", Model.BookingFromDate), new { @readonly = "readonly", @class = "AdminFields" })
                <p class="qualif-detail">@Html.ValidationMessageFor(model => model.BookingFromDate)</p>
                @Html.HiddenFor(x => x.BookingFromDate, new { @id = "bookingFromDate" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Booking To Date")<span class="mandatory">*</span>
            </div>
            <div class="editor-field fieldwidth floatL " id="BookingToDateCollection">
                @Html.TextBoxFor(x => x.BookingToDate, String.Format("{0:dd-MMM-yyyy}", Model.BookingToDate), new { @readonly = "readonly", @class = "AdminFields" })
                <p class="qualif-detail">@Html.ValidationMessageFor(x => x.BookingToDate)</p>
                @Html.HiddenFor(x => x.BookingToDate, new { @id = "bookingToDate" })
            </div>
        </div>*@
        <div class="formrow clearfix">
            <div class="LabelDiv">
                @Html.Label("Hotel Confirmation: ")
            </div>
            <div class="InputDiv positionR">
                <input type="file" name="doc" id="Accoupload" size="24" data-val-required="please select a file to Upload"
                    class="FileUploadBtn" />
                <div class="BrowserVisible">
                    <input type="button" class="BtnForCustomUpload" value="Browse.." /><input type="text"
                        id="FalseAccFileUploadBtn" class="FileField" value="No files selected" />
                </div>
                <p>
                    <span id="AdminAccomUploadError" class="field-validation-error"></span>
                    @Html.HiddenFor(model => model.FileName)
                </p>
            </div>
        </div>
        @*      <div class="InputDiv positionR BrowseSpacingFix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Hotel Confirmation")
            </div>
            <input type="file" name="doc" id="Accoupload" size="24" data-val-required="please select a file to Upload" />
            <div class="BrowserVisible">
                <input type="button" class="BtnForCustomUpload" value="Browse.." /><input type="text"
                    id="AccomFileField" class="FileField" value="No files selected" /></div>
            <p class="qualif-detail">
                <span id="AdminAccomUploadError" class="field-validation-error"></span>
                @Html.HiddenFor(model => model.FileName)
            </p>
        </div>*@ @*        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                @Html.Label("Additional Details")
            </div>
            <div class="editor-field fieldwidth floatL ">
                @Html.TextBoxFor(x => x.AdditionalDetails)
                <p class="qualif-detail">@Html.ValidationMessageFor(x => x.AdditionalDetails)</p>
                @Html.HiddenFor(x => x.AdditionalDetails, new { @id = "additionalDetails" })
            </div>
        </div>
*@
        <div class="mrgnB18 floatR">
            <input id="btnSaveAccomodation" type="submit" value="Save" class="ButtonGray" />
            <input id="cancel" type="button" value="Reset" onclick=" emptyDialog()" class="ButtonGray " />
        </div>
    </div> 
}
@*<div id="AddAccomodationSuccessMessege" style="display: none;">
    <p>
        Accommodation details have been saved.
    </p>
</div>
<div id="AddAccomodationErrorMessege" style="display: none;">
    <p>
        Unable to add record
    </p>
</div>*@
<div id="AddAccomodationStartDate" style="display: none;">
    <p>
        Booking From Date cannot be greater than Booking To Date
    </p>
</div>
<div id="AddAccomodationEndDate" style="display: none;">
    <p>
        Booking To Date cannot be less than Booking From Date
    </p>
</div>
@*<div id="DeleteConfirmation" style="display: none;">
    <p>
        Record has been deleted.
    </p>
</div>
<div id="DeleteConfirmationDialog" style="display: none">
    <p>
        Are you sure you want to delete the records?</p>
</div>*@ @*<div id="mailError" title="Mail Error" style="display: none">
    <p>
        Mail Sending Failed.</p>
</div>
<div id="failedRecipient" title="Sending Failed" style="display: none">
    <center><span>Could not send mail to </span><span id="span_failedRecipient"></span></center>
</div>*@ 