@model HRMS.Models.BondDetailsViewModel
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("../../Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
<script src="../../Scripts/Global.min.js" type="text/javascript"></script>
<script type="text/javascript">
	$.ajaxSetup({
		// Disable caching of AJAX responses
		cache: false
	});
	$(document).ready(function () {
		if ($('#UserRole').val() != '@HRMS.Models.UserRoles.HRAdmin') {
			$("#frmAddBondDetails :input").attr("disabled", true);
			$(".ui-datepicker-trigger").hide();
		}

	$('#txtBondDetailsOverDate').datepicker({ dateFormat: "mm/dd/yy", changeMonth: true, changeYear: true, yearRange: "-20:+30", showOn: "both", buttonImage: "../../Content/themes/base/images/calendar.gif", buttonImageOnly: true });
            @{
                var yesValue = HRMS.Models.YesNoCondition.Yes.ToLower();
                var novalue = HRMS.Models.YesNoCondition.No.ToLower();
            }
        SetFormValueBasedOnStatus();
        $("#ddlBondStatus").change(function () {

          SetFormValueBasedOnStatus();
        });
        $("#btnSaveBondDetails").click(function(){
		 var a = $("#txtBondAmount").val();
		 var b= $("#txtBondDetailsOverDate").val();
                if ($("#frmAddBondDetails").valid()) {
                  DisplayLoadingDialog();  //checked
                    $.ajax({
                            url: '@Url.Action("BondDetails", "EmployeeDetails")',
                            type: 'POST',
                            data: $('#frmAddBondDetails').serialize(),
                            success: function (results) {
                            $("#loading").dialog("close");
                            $("#loading").dialog("destroy");
							$('#BondDetailsDialog').dialog('close');
                                TaskCompletionShowDialog(results);
                            }
                        });
                     }
                        return false;
         });//End of SaveBondDetails button click event

         $("#btnCancelBondDetails").click(function(){
		     $(".field-validation-error").empty();
		     $('input').removeClass("input-validation-error");
		     $("#ddlBondType option[value=" + $("#hdnBondType").val() + "]").attr('selected', 'selected');
             $("#ddlBondStatus option[value=" + $("#hdnBondStatus").val() + "]").attr('selected', 'selected');
             $("#txtBondAmount").val($("#hdnBondAmount").val());
             $("#txtBondDetailsOverDate").val($("#hdnBondOverDate").val());
             SetFormValueBasedOnStatus();
         });
    });//End of Document.ready function

    function SetFormValueBasedOnStatus()
    {
      if ($("#ddlBondStatus option:selected").val() == '@yesValue'){
                $("#txtBondAmount").attr('disabled',false);
                $(".ui-datepicker-trigger").show();
				$("#BAmountMandSign").show();
				$("#BOverDateMandSign").show();
                $("#txtBondDetailsOverDate").attr('disabled',false);
            }
        if ($("#ddlBondStatus option:selected").val() == '@novalue'){
                $("#txtBondAmount").attr('disabled',true);
				$("#txtBondAmount").clear;
                $("#txtBondAmount").val('');
                 $(".ui-datepicker-trigger").hide();
				 $("#BAmountMandSign").hide();
				 $("#BOverDateMandSign").hide();

                $("#txtBondDetailsOverDate").attr('disabled',true);
				$("#txtBondDetailsOverDate").clear;
				$("#txtBondDetailsOverDate").val('');
				$(".field-validation-error").empty();
		        $('input').removeClass("input-validation-error");
            }
    }

    function TaskCompletionShowDialog(dialogMessage) {
    $("#successBondDialog p").html(dialogMessage);
        $("#successBondDialog").dialog({
            autoOpen: false,
            modal: true,
            resizable: false,
			height: 140,
            width:300,
            title: "Bond Details",
            buttons: {
                "Ok": function () {
                    jQuery("#jqBondDetailsTable").trigger("reloadGrid");
                                              $(this).dialog('close');
                }
            }
        });

        $("#successBondDialog").dialog('open');
    }
</script>
@using (Html.BeginForm("", "", FormMethod.Post, new { id = "frmAddBondDetails" }))
{
    @Html.HiddenFor(m => m.UserRole)
    @Html.HiddenFor(m => m.EmployeeId)
    @Html.HiddenFor(m => m.BondId)
    @Html.ValidationSummary(true)
    <h3 class="mrgnT15">
        Bond Details</h3>
    <div class="NoNegMrgnContainer">
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                <span class="mandatory">*</span> @Html.LabelFor(m => m.BondType):
            </div>
            <div class="editor-field fieldwidth floatL">
                @Html.DropDownListFor(m => m.BondType, new SelectList(ViewBag.BondTypeList, "BondTypeID", "BondType"), "Select", new { @id = "ddlBondType" })<br />
                <p class="qualif-detail">@Html.ValidationMessageFor(m => m.BondType)</p>
                @Html.HiddenFor(m => m.BondType, new { @id = "hdnBondType" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                <span class="mandatory">*</span> @Html.LabelFor(m => m.BondStatus):
            </div>
            <div class="editor-field fieldwidth floatL">
                @Html.DropDownListFor(m => m.BondStatus, new SelectList(Model.BondStatusList, "Key", "Value"), "Select", new { @id = "ddlBondStatus" })<br />
                <p class="qualif-detail">@Html.ValidationMessageFor(m => m.BondStatus)</p>
                @Html.HiddenFor(m => m.BondStatus, new { @id = "hdnBondStatus" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                <span class="mandatory" id="BAmountMandSign">*</span> @Html.LabelFor(m => m.BondAmount):
            </div>
            <div class="editor-field fieldwidth floatL">
                @Html.TextBoxFor(m => m.BondAmount, new { @id = "txtBondAmount" })<br />
                <p class="qualif-detail">@Html.ValidationMessageFor(m => m.BondAmount)</p>
                @Html.HiddenFor(m => m.BondAmount, new { @id = "hdnBondAmount" })
            </div>
        </div>
        <div class="formcol clearfix">
            <div class="editor-label labelwidth floatL">
                <span class="mandatory" id="BOverDateMandSign">*</span> @Html.LabelFor(m => m.BondOverDate):
            </div>
            <div class="editor-field fieldwidth floatL">
                @Html.TextBoxFor(m => m.BondOverDate, string.Format("{0: MMM dd yyyy}", Model.BondOverDate), new { @id = "txtBondDetailsOverDate", @readonly = "readonly" })<br />
                <p class="qualif-detail">@Html.ValidationMessageFor(m => m.BondOverDate)</p>
                @Html.Hidden("BondOverDate", String.Format("{0: MMM dd yyyy}", Model.BondOverDate), new { @id = "hdnBondOverDate" })
            </div>
        </div>
    </div>

    <div class="clear popup_button ">
        <div class="floatR">
            <input type="submit" value="Save" id="btnSaveBondDetails" class="button" />
            <input type="button" value="Reset" id="btnCancelBondDetails" class="button" />
        </div>
    </div>

}
<div id="successBondDialog" title="Bond Details" style="display: none">
    <p>
        Bond Details have been saved.</p>
</div>
<div id="errorBondDialog" title="Error" style="display: none">
    <p>
        There are some errors.</p>
</div>